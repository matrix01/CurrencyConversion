//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `converted.json`.
    static let convertedJson = Rswift.FileResource(bundle: R.hostingBundle, name: "converted", pathExtension: "json")
    /// Resource file `live.json`.
    static let liveJson = Rswift.FileResource(bundle: R.hostingBundle, name: "live", pathExtension: "json")

    /// `bundle.url(forResource: "converted", withExtension: "json")`
    static func convertedJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.convertedJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "live", withExtension: "json")`
    static func liveJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.liveJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `CurrencyListCell`.
    static let currencyListCell = _R.nib._CurrencyListCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CurrencyListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currencyListCell) instead")
    static func currencyListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currencyListCell)
    }
    #endif

    static func currencyListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyListCell? {
      return R.nib.currencyListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyListCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CurrencyListCell`.
    static let currencyListCell: Rswift.ReuseIdentifier<CurrencyListCell> = Rswift.ReuseIdentifier(identifier: "CurrencyListCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 16 localization keys.
    struct localizable {
      /// Value: A server error has occurred. Please try again later.
      static let errorServerErrorMessage = Rswift.StringResource(key: "Error.ServerError.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Access Restricted - Your current Subscription Plan does not support Source Currency Switching.
      static let errorSubscriptionNotValidMessage = Rswift.StringResource(key: "Error.Subscription.NotValidMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Bad server response
      static let errorBadServerResponseMessage = Rswift.StringResource(key: "Error.BadServerResponse.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let commonCancel = Rswift.StringResource(key: "Common.Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Connection canceled
      static let errorConnectionCanceledMessage = Rswift.StringResource(key: "Error.ConnectionCanceled.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Connection timed out
      static let errorConnectionTimedOutMessage = Rswift.StringResource(key: "Error.ConnectionTimedOut.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not fetch currency. Please try again later.
      static let errorCurrencyFetchFailedMessage = Rswift.StringResource(key: "Error.CurrencyFetchFailed.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Data is empty
      static let errorEmptyDataMessage = Rswift.StringResource(key: "Error.EmptyData.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error Http StatusCode
      static let errorHttpStatusCodeNotSuccessMessage = Rswift.StringResource(key: "Error.HttpStatusCodeNotSuccess.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invalid Http StatusCode
      static let errorInvalidHttpStatusCodeMessage = Rswift.StringResource(key: "Error.InvalidHttpStatusCode.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: JSON decode failed
      static let errorJsonNotDecodeMessage = Rswift.StringResource(key: "Error.JsonNotDecode.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: JSON encode failed
      static let errorJsonNotEncodeMessage = Rswift.StringResource(key: "Error.JsonNotEncode.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let commonOK = Rswift.StringResource(key: "Common.OK", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Offline
      static let errorConnectionDisconnectedMessage = Rswift.StringResource(key: "Error.ConnectionDisconnected.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Response is empty
      static let errorEmptyResponseMessage = Rswift.StringResource(key: "Error.EmptyResponse.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unknown error
      static let errorSystemErrorUnknownErrorMessage = Rswift.StringResource(key: "Error.SystemError.UnknownError.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: A server error has occurred. Please try again later.
      static func errorServerErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.ServerError.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.ServerError.Message"
        }

        return NSLocalizedString("Error.ServerError.Message", bundle: bundle, comment: "")
      }

      /// Value: Access Restricted - Your current Subscription Plan does not support Source Currency Switching.
      static func errorSubscriptionNotValidMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Subscription.NotValidMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Subscription.NotValidMessage"
        }

        return NSLocalizedString("Error.Subscription.NotValidMessage", bundle: bundle, comment: "")
      }

      /// Value: Bad server response
      static func errorBadServerResponseMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.BadServerResponse.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.BadServerResponse.Message"
        }

        return NSLocalizedString("Error.BadServerResponse.Message", bundle: bundle, comment: "")
      }

      /// Value: Cancel
      static func commonCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Cancel"
        }

        return NSLocalizedString("Common.Cancel", bundle: bundle, comment: "")
      }

      /// Value: Connection canceled
      static func errorConnectionCanceledMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.ConnectionCanceled.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.ConnectionCanceled.Message"
        }

        return NSLocalizedString("Error.ConnectionCanceled.Message", bundle: bundle, comment: "")
      }

      /// Value: Connection timed out
      static func errorConnectionTimedOutMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.ConnectionTimedOut.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.ConnectionTimedOut.Message"
        }

        return NSLocalizedString("Error.ConnectionTimedOut.Message", bundle: bundle, comment: "")
      }

      /// Value: Could not fetch currency. Please try again later.
      static func errorCurrencyFetchFailedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.CurrencyFetchFailed.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.CurrencyFetchFailed.Message"
        }

        return NSLocalizedString("Error.CurrencyFetchFailed.Message", bundle: bundle, comment: "")
      }

      /// Value: Data is empty
      static func errorEmptyDataMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.EmptyData.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.EmptyData.Message"
        }

        return NSLocalizedString("Error.EmptyData.Message", bundle: bundle, comment: "")
      }

      /// Value: Error Http StatusCode
      static func errorHttpStatusCodeNotSuccessMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.HttpStatusCodeNotSuccess.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.HttpStatusCodeNotSuccess.Message"
        }

        return NSLocalizedString("Error.HttpStatusCodeNotSuccess.Message", bundle: bundle, comment: "")
      }

      /// Value: Invalid Http StatusCode
      static func errorInvalidHttpStatusCodeMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.InvalidHttpStatusCode.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.InvalidHttpStatusCode.Message"
        }

        return NSLocalizedString("Error.InvalidHttpStatusCode.Message", bundle: bundle, comment: "")
      }

      /// Value: JSON decode failed
      static func errorJsonNotDecodeMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.JsonNotDecode.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.JsonNotDecode.Message"
        }

        return NSLocalizedString("Error.JsonNotDecode.Message", bundle: bundle, comment: "")
      }

      /// Value: JSON encode failed
      static func errorJsonNotEncodeMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.JsonNotEncode.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.JsonNotEncode.Message"
        }

        return NSLocalizedString("Error.JsonNotEncode.Message", bundle: bundle, comment: "")
      }

      /// Value: OK
      static func commonOK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.OK"
        }

        return NSLocalizedString("Common.OK", bundle: bundle, comment: "")
      }

      /// Value: Offline
      static func errorConnectionDisconnectedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.ConnectionDisconnected.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.ConnectionDisconnected.Message"
        }

        return NSLocalizedString("Error.ConnectionDisconnected.Message", bundle: bundle, comment: "")
      }

      /// Value: Response is empty
      static func errorEmptyResponseMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.EmptyResponse.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.EmptyResponse.Message"
        }

        return NSLocalizedString("Error.EmptyResponse.Message", bundle: bundle, comment: "")
      }

      /// Value: Unknown error
      static func errorSystemErrorUnknownErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.SystemError.UnknownError.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.SystemError.UnknownError.Message"
        }

        return NSLocalizedString("Error.SystemError.UnknownError.Message", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _CurrencyListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CurrencyListCell

      let bundle = R.hostingBundle
      let identifier = "CurrencyListCell"
      let name = "CurrencyListCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyListCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainViewController

      let bundle = R.hostingBundle
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"

      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
